// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.4
// source: smart_contract.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ExecuteTransactions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transactions []*Transaction `protobuf:"bytes,1,rep,name=Transactions,proto3" json:"Transactions,omitempty"`
	GroupId      []byte         `protobuf:"bytes,2,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	BlockNumber  []byte         `protobuf:"bytes,3,opt,name=BlockNumber,proto3" json:"BlockNumber,omitempty"`
}

func (x *ExecuteTransactions) Reset() {
	*x = ExecuteTransactions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smart_contract_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteTransactions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteTransactions) ProtoMessage() {}

func (x *ExecuteTransactions) ProtoReflect() protoreflect.Message {
	mi := &file_smart_contract_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteTransactions.ProtoReflect.Descriptor instead.
func (*ExecuteTransactions) Descriptor() ([]byte, []int) {
	return file_smart_contract_proto_rawDescGZIP(), []int{0}
}

func (x *ExecuteTransactions) GetTransactions() []*Transaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *ExecuteTransactions) GetGroupId() []byte {
	if x != nil {
		return x.GroupId
	}
	return nil
}

func (x *ExecuteTransactions) GetBlockNumber() []byte {
	if x != nil {
		return x.BlockNumber
	}
	return nil
}

// execute result
type ExecuteResultHashData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionHash      []byte         `protobuf:"bytes,1,opt,name=TransactionHash,proto3" json:"TransactionHash,omitempty"`
	Action               ACTION         `protobuf:"varint,2,opt,name=Action,proto3,enum=transaction.ACTION" json:"Action,omitempty"`
	SortedMapAddBalance  [][]byte       `protobuf:"bytes,3,rep,name=SortedMapAddBalance,proto3" json:"SortedMapAddBalance,omitempty"`     // addresses with add balance
	SortedMapSubBalance  [][]byte       `protobuf:"bytes,4,rep,name=SortedMapSubBalance,proto3" json:"SortedMapSubBalance,omitempty"`     // addresses with sub balance
	SortedMapCodeHash    [][]byte       `protobuf:"bytes,5,rep,name=SortedMapCodeHash,proto3" json:"SortedMapCodeHash,omitempty"`         // address were deployed by this transaction
	SortedMapStorageRoot [][]byte       `protobuf:"bytes,6,rep,name=SortedMapStorageRoot,proto3" json:"SortedMapStorageRoot,omitempty"`   // address with new storage root
	SortedMapLogsHash    [][]byte       `protobuf:"bytes,7,rep,name=SortedMapLogsHash,proto3" json:"SortedMapLogsHash,omitempty"`         // address with new log hash
	Status               RECEIPT_STATUS `protobuf:"varint,8,opt,name=Status,proto3,enum=receipt.RECEIPT_STATUS" json:"Status,omitempty"`  // returns (function had call return) or halted (function run complete with no return ) or threw (err)
	Exception            EXCEPTION      `protobuf:"varint,9,opt,name=Exception,proto3,enum=receipt.EXCEPTION" json:"Exception,omitempty"` // Exception has been threw
	Return               []byte         `protobuf:"bytes,10,opt,name=Return,proto3" json:"Return,omitempty"`                              // result after call
	GasUsed              uint64         `protobuf:"varint,11,opt,name=GasUsed,proto3" json:"GasUsed,omitempty"`
}

func (x *ExecuteResultHashData) Reset() {
	*x = ExecuteResultHashData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smart_contract_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteResultHashData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteResultHashData) ProtoMessage() {}

func (x *ExecuteResultHashData) ProtoReflect() protoreflect.Message {
	mi := &file_smart_contract_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteResultHashData.ProtoReflect.Descriptor instead.
func (*ExecuteResultHashData) Descriptor() ([]byte, []int) {
	return file_smart_contract_proto_rawDescGZIP(), []int{1}
}

func (x *ExecuteResultHashData) GetTransactionHash() []byte {
	if x != nil {
		return x.TransactionHash
	}
	return nil
}

func (x *ExecuteResultHashData) GetAction() ACTION {
	if x != nil {
		return x.Action
	}
	return ACTION_EMPTY
}

func (x *ExecuteResultHashData) GetSortedMapAddBalance() [][]byte {
	if x != nil {
		return x.SortedMapAddBalance
	}
	return nil
}

func (x *ExecuteResultHashData) GetSortedMapSubBalance() [][]byte {
	if x != nil {
		return x.SortedMapSubBalance
	}
	return nil
}

func (x *ExecuteResultHashData) GetSortedMapCodeHash() [][]byte {
	if x != nil {
		return x.SortedMapCodeHash
	}
	return nil
}

func (x *ExecuteResultHashData) GetSortedMapStorageRoot() [][]byte {
	if x != nil {
		return x.SortedMapStorageRoot
	}
	return nil
}

func (x *ExecuteResultHashData) GetSortedMapLogsHash() [][]byte {
	if x != nil {
		return x.SortedMapLogsHash
	}
	return nil
}

func (x *ExecuteResultHashData) GetStatus() RECEIPT_STATUS {
	if x != nil {
		return x.Status
	}
	return RECEIPT_STATUS_RETURNED
}

func (x *ExecuteResultHashData) GetException() EXCEPTION {
	if x != nil {
		return x.Exception
	}
	return EXCEPTION_ERR_OUT_OF_GAS
}

func (x *ExecuteResultHashData) GetReturn() []byte {
	if x != nil {
		return x.Return
	}
	return nil
}

func (x *ExecuteResultHashData) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

type ExecuteResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionHash []byte            `protobuf:"bytes,1,opt,name=TransactionHash,proto3" json:"TransactionHash,omitempty"`
	Action          ACTION            `protobuf:"varint,2,opt,name=Action,proto3,enum=transaction.ACTION" json:"Action,omitempty"`
	MapAddBalance   map[string][]byte `protobuf:"bytes,3,rep,name=MapAddBalance,proto3" json:"MapAddBalance,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`   // addresses with add balance
	MapSubBalance   map[string][]byte `protobuf:"bytes,4,rep,name=MapSubBalance,proto3" json:"MapSubBalance,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`   // addresses with sub balance
	MapCodeHash     map[string][]byte `protobuf:"bytes,5,rep,name=MapCodeHash,proto3" json:"MapCodeHash,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`       // address were deployed by this transaction
	MapStorageRoot  map[string][]byte `protobuf:"bytes,6,rep,name=MapStorageRoot,proto3" json:"MapStorageRoot,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // address were deployed by this transaction
	MapLogsHash     map[string][]byte `protobuf:"bytes,7,rep,name=MapLogsHash,proto3" json:"MapLogsHash,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`       // address with new log hash
	Status          RECEIPT_STATUS    `protobuf:"varint,8,opt,name=Status,proto3,enum=receipt.RECEIPT_STATUS" json:"Status,omitempty"`                                                                            // returns (function had call return) or halted (function run complete with no return ) or threw (err)
	Exception       EXCEPTION         `protobuf:"varint,9,opt,name=Exception,proto3,enum=receipt.EXCEPTION" json:"Exception,omitempty"`                                                                           // Exception has been threw
	Return          []byte            `protobuf:"bytes,10,opt,name=Return,proto3" json:"Return,omitempty"`                                                                                                        // result after call
	GasUsed         uint64            `protobuf:"varint,11,opt,name=GasUsed,proto3" json:"GasUsed,omitempty"`
	Hash            []byte            `protobuf:"bytes,12,opt,name=Hash,proto3" json:"Hash,omitempty"` // use for voting result
}

func (x *ExecuteResult) Reset() {
	*x = ExecuteResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smart_contract_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteResult) ProtoMessage() {}

func (x *ExecuteResult) ProtoReflect() protoreflect.Message {
	mi := &file_smart_contract_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteResult.ProtoReflect.Descriptor instead.
func (*ExecuteResult) Descriptor() ([]byte, []int) {
	return file_smart_contract_proto_rawDescGZIP(), []int{2}
}

func (x *ExecuteResult) GetTransactionHash() []byte {
	if x != nil {
		return x.TransactionHash
	}
	return nil
}

func (x *ExecuteResult) GetAction() ACTION {
	if x != nil {
		return x.Action
	}
	return ACTION_EMPTY
}

func (x *ExecuteResult) GetMapAddBalance() map[string][]byte {
	if x != nil {
		return x.MapAddBalance
	}
	return nil
}

func (x *ExecuteResult) GetMapSubBalance() map[string][]byte {
	if x != nil {
		return x.MapSubBalance
	}
	return nil
}

func (x *ExecuteResult) GetMapCodeHash() map[string][]byte {
	if x != nil {
		return x.MapCodeHash
	}
	return nil
}

func (x *ExecuteResult) GetMapStorageRoot() map[string][]byte {
	if x != nil {
		return x.MapStorageRoot
	}
	return nil
}

func (x *ExecuteResult) GetMapLogsHash() map[string][]byte {
	if x != nil {
		return x.MapLogsHash
	}
	return nil
}

func (x *ExecuteResult) GetStatus() RECEIPT_STATUS {
	if x != nil {
		return x.Status
	}
	return RECEIPT_STATUS_RETURNED
}

func (x *ExecuteResult) GetException() EXCEPTION {
	if x != nil {
		return x.Exception
	}
	return EXCEPTION_ERR_OUT_OF_GAS
}

func (x *ExecuteResult) GetReturn() []byte {
	if x != nil {
		return x.Return
	}
	return nil
}

func (x *ExecuteResult) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *ExecuteResult) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

type ExecuteResultsHashData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResultHashes [][]byte `protobuf:"bytes,1,rep,name=ResultHashes,proto3" json:"ResultHashes,omitempty"`
	GroupId      []byte   `protobuf:"bytes,2,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
}

func (x *ExecuteResultsHashData) Reset() {
	*x = ExecuteResultsHashData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smart_contract_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteResultsHashData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteResultsHashData) ProtoMessage() {}

func (x *ExecuteResultsHashData) ProtoReflect() protoreflect.Message {
	mi := &file_smart_contract_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteResultsHashData.ProtoReflect.Descriptor instead.
func (*ExecuteResultsHashData) Descriptor() ([]byte, []int) {
	return file_smart_contract_proto_rawDescGZIP(), []int{3}
}

func (x *ExecuteResultsHashData) GetResultHashes() [][]byte {
	if x != nil {
		return x.ResultHashes
	}
	return nil
}

func (x *ExecuteResultsHashData) GetGroupId() []byte {
	if x != nil {
		return x.GroupId
	}
	return nil
}

type ExecuteResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash    []byte           `protobuf:"bytes,1,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Results []*ExecuteResult `protobuf:"bytes,2,rep,name=Results,proto3" json:"Results,omitempty"`
	GroupId []byte           `protobuf:"bytes,3,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
}

func (x *ExecuteResults) Reset() {
	*x = ExecuteResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smart_contract_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteResults) ProtoMessage() {}

func (x *ExecuteResults) ProtoReflect() protoreflect.Message {
	mi := &file_smart_contract_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteResults.ProtoReflect.Descriptor instead.
func (*ExecuteResults) Descriptor() ([]byte, []int) {
	return file_smart_contract_proto_rawDescGZIP(), []int{4}
}

func (x *ExecuteResults) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *ExecuteResults) GetResults() []*ExecuteResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ExecuteResults) GetGroupId() []byte {
	if x != nil {
		return x.GroupId
	}
	return nil
}

var File_smart_contract_proto protoreflect.FileDescriptor

var file_smart_contract_proto_rawDesc = []byte{
	0x0a, 0x14, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8f, 0x01, 0x0a, 0x13, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x3c, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xf7, 0x03, 0x0a, 0x15, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x61, 0x73, 0x68,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2b,
	0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x52, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x53,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x70, 0x41, 0x64, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x13, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x4d, 0x61, 0x70, 0x41, 0x64, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x30, 0x0a,
	0x13, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x70, 0x53, 0x75, 0x62, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x13, 0x53, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x4d, 0x61, 0x70, 0x53, 0x75, 0x62, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x2c, 0x0a, 0x11, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x64, 0x65,
	0x48, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x11, 0x53, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x32, 0x0a,
	0x14, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x52, 0x6f, 0x6f, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x14, 0x53, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x6f, 0x6f,
	0x74, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x70, 0x4c, 0x6f,
	0x67, 0x73, 0x48, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x11, 0x53, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x70, 0x4c, 0x6f, 0x67, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x2f, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x2e, 0x52, 0x45, 0x43, 0x45, 0x49, 0x50,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x30, 0x0a, 0x09, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x2e, 0x45, 0x58,
	0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x09, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x61,
	0x73, 0x55, 0x73, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x47, 0x61, 0x73,
	0x55, 0x73, 0x65, 0x64, 0x22, 0x85, 0x08, 0x0a, 0x0d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x2b, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a,
	0x0d, 0x4d, 0x61, 0x70, 0x41, 0x64, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x2e, 0x4d, 0x61, 0x70, 0x41, 0x64, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x4d, 0x61, 0x70, 0x41, 0x64, 0x64, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x56, 0x0a, 0x0d, 0x4d, 0x61, 0x70, 0x53, 0x75, 0x62, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73,
	0x6d, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x4d, 0x61, 0x70, 0x53,
	0x75, 0x62, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d,
	0x4d, 0x61, 0x70, 0x53, 0x75, 0x62, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x50, 0x0a,
	0x0b, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x2e, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0b, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x59, 0x0a, 0x0e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x6f, 0x6f,
	0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x52, 0x6f, 0x6f, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x4d, 0x61, 0x70, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x50, 0x0a, 0x0b, 0x4d, 0x61,
	0x70, 0x4c, 0x6f, 0x67, 0x73, 0x48, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x4d,
	0x61, 0x70, 0x4c, 0x6f, 0x67, 0x73, 0x48, 0x61, 0x73, 0x68, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0b, 0x4d, 0x61, 0x70, 0x4c, 0x6f, 0x67, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2f, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x2e, 0x52, 0x45, 0x43, 0x45, 0x49, 0x50, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a,
	0x09, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x2e, 0x45, 0x58, 0x43, 0x45, 0x50,
	0x54, 0x49, 0x4f, 0x4e, 0x52, 0x09, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x61, 0x73, 0x55, 0x73,
	0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x47, 0x61, 0x73, 0x55, 0x73, 0x65,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x40, 0x0a, 0x12, 0x4d, 0x61, 0x70, 0x41, 0x64, 0x64, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x4d, 0x61, 0x70, 0x53, 0x75,
	0x62, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x4d, 0x61, 0x70,
	0x43, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10,
	0x4d, 0x61, 0x70, 0x4c, 0x6f, 0x67, 0x73, 0x48, 0x61, 0x73, 0x68, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x56, 0x0a, 0x16,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x48, 0x61,
	0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0c, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x22, 0x77, 0x0a, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x12, 0x37, 0x0a, 0x07, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6d,
	0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x42, 0x30, 0x0a,
	0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x66, 0x69, 0x61, 0x69, 0x76, 0x6e, 0x2e, 0x66, 0x69, 0x6e, 0x73,
	0x64, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5a, 0x06, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_smart_contract_proto_rawDescOnce sync.Once
	file_smart_contract_proto_rawDescData = file_smart_contract_proto_rawDesc
)

func file_smart_contract_proto_rawDescGZIP() []byte {
	file_smart_contract_proto_rawDescOnce.Do(func() {
		file_smart_contract_proto_rawDescData = protoimpl.X.CompressGZIP(file_smart_contract_proto_rawDescData)
	})
	return file_smart_contract_proto_rawDescData
}

var file_smart_contract_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_smart_contract_proto_goTypes = []interface{}{
	(*ExecuteTransactions)(nil),    // 0: smart_contract.ExecuteTransactions
	(*ExecuteResultHashData)(nil),  // 1: smart_contract.ExecuteResultHashData
	(*ExecuteResult)(nil),          // 2: smart_contract.ExecuteResult
	(*ExecuteResultsHashData)(nil), // 3: smart_contract.ExecuteResultsHashData
	(*ExecuteResults)(nil),         // 4: smart_contract.ExecuteResults
	nil,                            // 5: smart_contract.ExecuteResult.MapAddBalanceEntry
	nil,                            // 6: smart_contract.ExecuteResult.MapSubBalanceEntry
	nil,                            // 7: smart_contract.ExecuteResult.MapCodeHashEntry
	nil,                            // 8: smart_contract.ExecuteResult.MapStorageRootEntry
	nil,                            // 9: smart_contract.ExecuteResult.MapLogsHashEntry
	(*Transaction)(nil),            // 10: transaction.Transaction
	(ACTION)(0),                    // 11: transaction.ACTION
	(RECEIPT_STATUS)(0),            // 12: receipt.RECEIPT_STATUS
	(EXCEPTION)(0),                 // 13: receipt.EXCEPTION
}
var file_smart_contract_proto_depIdxs = []int32{
	10, // 0: smart_contract.ExecuteTransactions.Transactions:type_name -> transaction.Transaction
	11, // 1: smart_contract.ExecuteResultHashData.Action:type_name -> transaction.ACTION
	12, // 2: smart_contract.ExecuteResultHashData.Status:type_name -> receipt.RECEIPT_STATUS
	13, // 3: smart_contract.ExecuteResultHashData.Exception:type_name -> receipt.EXCEPTION
	11, // 4: smart_contract.ExecuteResult.Action:type_name -> transaction.ACTION
	5,  // 5: smart_contract.ExecuteResult.MapAddBalance:type_name -> smart_contract.ExecuteResult.MapAddBalanceEntry
	6,  // 6: smart_contract.ExecuteResult.MapSubBalance:type_name -> smart_contract.ExecuteResult.MapSubBalanceEntry
	7,  // 7: smart_contract.ExecuteResult.MapCodeHash:type_name -> smart_contract.ExecuteResult.MapCodeHashEntry
	8,  // 8: smart_contract.ExecuteResult.MapStorageRoot:type_name -> smart_contract.ExecuteResult.MapStorageRootEntry
	9,  // 9: smart_contract.ExecuteResult.MapLogsHash:type_name -> smart_contract.ExecuteResult.MapLogsHashEntry
	12, // 10: smart_contract.ExecuteResult.Status:type_name -> receipt.RECEIPT_STATUS
	13, // 11: smart_contract.ExecuteResult.Exception:type_name -> receipt.EXCEPTION
	2,  // 12: smart_contract.ExecuteResults.Results:type_name -> smart_contract.ExecuteResult
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_smart_contract_proto_init() }
func file_smart_contract_proto_init() {
	if File_smart_contract_proto != nil {
		return
	}
	file_transaction_proto_init()
	file_receipt_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_smart_contract_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteTransactions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smart_contract_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteResultHashData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smart_contract_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smart_contract_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteResultsHashData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smart_contract_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_smart_contract_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_smart_contract_proto_goTypes,
		DependencyIndexes: file_smart_contract_proto_depIdxs,
		MessageInfos:      file_smart_contract_proto_msgTypes,
	}.Build()
	File_smart_contract_proto = out.File
	file_smart_contract_proto_rawDesc = nil
	file_smart_contract_proto_goTypes = nil
	file_smart_contract_proto_depIdxs = nil
}
